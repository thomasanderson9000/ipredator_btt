#!/bin/env python
"""Script to startup environment using docker-compose build && docker-compose up <args>.

   Reads in required environment variables."""
from __future__ import print_function
import sys
import os.path
from os.path import dirname, realpath
from setup import RE_ENV, get_default_and_override_files
from subprocess import call


def write_all_vars(path, allvars_file):
    """Create a file that contains exports for all environment variables defined."""
    files = get_default_and_override_files(path)
    allvars_contents = []
    for files_tuple in files:
        for env_file in files_tuple:
            with open(env_file, 'r') as env_fh:
                for env_line in env_fh.readlines():
                    if RE_ENV.match(env_line):
                        allvars_contents.append('export ' + env_line)
    with open(allvars_file, 'w') as all_fh:
        all_fh.write("# THIS FILE AUTOMATICALLY GENERATED BY up.py. DO NOT MODIFY\n")
        for allvars_line in allvars_contents:
            all_fh.write(allvars_line)


def ensure_overrides_exist(path):
    """Make sure user has required override files in place."""
    files = get_default_and_override_files(path)
    missing_override = False
    for (_, user_file) in files:
        if not os.path.isfile(user_file):
            print("Missing override file '{}'".format(user_file))
            missing_override = True
    if missing_override:
        print("Missing required overrides. Run ./setup.py to correct.")
        sys.exit(1)

if __name__ == "__main__":
    if any(arg in sys.argv for arg in ['-h', '--help']):
        print("Sources required environment varialbes and runs:")
        print("docker-compose build docker-compose up <args>")
        print("./up.py [OPT: arguments to add after docker-compose up]")
        print("Examples:")
        print("  ./up.py")
        print("  ./up.py -d --force-recreate")

    current_dir = dirname(realpath(__file__))
    ensure_overrides_exist(current_dir)
    allvars_filename = os.path.join(current_dir, '.all_exported.tmp.env')
    write_all_vars(current_dir, allvars_filename)
    up_args = ' '.join(sys.argv[1:])
    cmd = 'source {} && docker-compose build && docker-compose up {}'.format(allvars_filename, up_args)
    print("Running: {}".format(cmd))
    call(cmd, shell=True)
